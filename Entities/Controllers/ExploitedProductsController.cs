using System.Threading.Tasks;
using System.Web.Mvc;
using Entities.Models;
using ExploitedProducts = Entities.Domain.Abstract.Entities.Exploitable.IExploitedProducts;

using PageableExploitedProducts = Entities.Domain.Abstract.Pages.PageableProducts<Entities.Domain.Pages.ProductsPageQuery, Entities.Domain.Pages.ExploitedProductsPage, Entities.Domain.Entities.ExploitedProduct>;

namespace Entities.Controllers
{
    public sealed class ExploitedProductsController : Controller
    {
        private readonly ExploitedProducts _exploitedProducts;

        private readonly PageableExploitedProducts _pageableExploitedProducts;

        public ExploitedProductsController(ExploitedProducts exploitedProducts, PageableExploitedProducts pageableExploitedProducts)
        {
            _exploitedProducts = exploitedProducts;
            _pageableExploitedProducts = pageableExploitedProducts;
        }

        [HttpPost]
        public async Task<JsonResult> PageAsync(ExploitedProductsPageQuery pageQuery)
        {
            var query = pageQuery.ToDomainPageQuery();
            var productsPage = await _pageableExploitedProducts.QueryPageAsync(query);

            return Json(productsPage);
        }

        public async Task ExploitAsync(ExploitProductsQuery query)
        {
            await _exploitedProducts.ExploitAsync(query.ProductsIds);
        }

        public ActionResult Index()
        {
            return View();
        }
    }
}