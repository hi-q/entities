
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Entities.Controllers;
using Entities.Domain;
using Entities.Domain.Abstract.Entities.Exploitable;
using Entities.Domain.Abstract.Pages;
using Entities.Domain.Entities;
using Entities.Domain.Products;
using Entities.Models;
using Entities.Tests.Common;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using PageableExploitedProducts = Entities.Domain.Abstract.Pages.PageableProducts<Entities.Domain.Pages.ProductsPageQuery, Entities.Domain.Pages.ExploitedProductsPage, Entities.Domain.Entities.ExploitedProduct>;
using Product = Entities.Domain.Entities.Product;
namespace Entities.Tests
{
    [TestClass]
    public class ExploitedProductsControllerTest
    {
        private Mock<DbSet<ExploitedProduct>> _exploitedProductsDbSet;

        private Mock<DbSet<Product>> _productsDbSet;

        private Mock<ExploitedProducts> _exploitedProducts;

        private Mock<PageableExploitedProducts> _pageableExploitedProducts;

        private ExploitedProductsController _ctrl;

        [TestInitialize]
        public void Setup()
        {
            _exploitedProductsDbSet = new Mock<DbSet<ExploitedProduct>>();
            _exploitedProductsDbSet.Mock();

            _productsDbSet = new Mock<DbSet<Product>>();
            _productsDbSet.Mock();

            const bool test = true;
            var ctx = new Mock<EntitiesContext>(MockBehavior.Loose, test);

            _exploitedProducts = new Mock<ExploitedProducts>(MockBehavior.Loose, ctx.Object);

            _exploitedProducts.Setup(ep => ep.ExploitAsync(It.IsAny<IEnumerable<long>>()))
                .Callback((IEnumerable<long> productsIds) =>
                {
                    var products = _productsDbSet.Object.Where(product => productsIds.Contains(product.SerialNumber));
                    foreach (var product in products)
                    {
                        var exploitedProduct = new ExploitedProduct(product);
                        _exploitedProductsDbSet.Object.Add(exploitedProduct);
                    }

                })
                .Returns(Task.Factory.StartNew(() =>
                {
                    Thread.Sleep(1000);
                }))
                ;

            _pageableExploitedProducts = null; // This is enough for now

            _ctrl = new ExploitedProductsController(_exploitedProducts.Object, null);
        }

        [TestCleanup]
        public void TearDown()
        {
            _exploitedProductsDbSet = null;
            _exploitedProducts = null;
            _pageableExploitedProducts = null;
            _ctrl = null;
        }

        [TestMethod]
        public async Task ExploitAsyncTask()
        {

            _productsDbSet.Object.Add(new Product(1) { Description = "descr1"});
            _productsDbSet.Object.Add(new Product(2) { Description = null });
            _productsDbSet.Object.Add(new Product(3) {Description = "descr3"});

            var query = new ExploitProductsQuery
            {
                Id = "1,2"
            };
            await _ctrl.ExploitAsync(query);

            var exploitedProducts = _exploitedProductsDbSet.Object;
            Assert.AreEqual(exploitedProducts.Count(), 2);
        }
    }
}
