using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Entities.Domain.Abstract;
using Entities.Domain.Abstract.Entities.Exploitable;
using Entities.Domain.Abstract.Repositories;
using Entities.Domain.Repositories;
using Product = Entities.Domain.Entities.Product;
using ExploitedProduct = Entities.Domain.Entities.ExploitedProduct;

namespace Entities.Domain.Products
{
    internal class ExploitedProducts : ProductsBase, IExploitedProducts
    {
        private readonly IRepository<ExploitedProduct> _exploitedProducts;

        private readonly IProducts<Product> _products; 

        public ExploitedProducts(EntitiesContext db) : base(db)
        {
            _exploitedProducts = new ExploitedProductsRepository(db);
            _products = new Products(db);
        }

        public virtual Task ExploitAsync(IEnumerable<long> exploitablesSerialNumbers)
        {
            return _products.FetchAsync(exploitablesSerialNumbers).ContinueWith((task) =>
            {
                var products = task.Result;
                var exploitedProducts = products.Select(product => new ExploitedProduct(product));
                foreach (var exploitedProduct in exploitedProducts)
                {
                    _exploitedProducts.Add(exploitedProduct);
                }

                SaveChanges();    
            });
        }
    }
}
